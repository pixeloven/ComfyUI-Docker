name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        type: boolean
        default: false

jobs:
  validate-config:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Docker Compose
      run: |
        docker compose config --quiet
    
    - name: Validate Docker Bake
      run: |
        docker buildx bake --file docker-bake.hcl --print

  test-compose-profiles:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Test Docker Compose profiles
      run: |
        # Test that profiles are properly configured
        docker compose --profile cpu config --services | grep -q core-cpu
        docker compose --profile core config --services | grep -q core-cuda
        docker compose --profile complete config --services | grep -q complete-cuda

  test-bake-targets:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Test Docker Bake targets
      run: |
        # Validate all expected targets exist in docker-bake.hcl
        docker buildx bake --file docker-bake.hcl --print | grep -q "core-cpu"
        docker buildx bake --file docker-bake.hcl --print | grep -q "core-cuda"
        docker buildx bake --file docker-bake.hcl --print | grep -q "runtime-cpu"
        docker buildx bake --file docker-bake.hcl --print | grep -q "runtime-cuda"
        docker buildx bake --file docker-bake.hcl --print | grep -q "complete-cuda"

  build-images:
    runs-on: ubuntu-latest
    needs: [validate-config, test-compose-profiles, test-bake-targets]
    env:
      REGISTRY: ghcr.io
    steps:
    - uses: actions/checkout@v4
    
    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Clean Docker Images
      run: |
        echo "ðŸ§¹ Removing Docker images..."
        sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
        echo "âœ… Docker images cleaned"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug
  
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Clear GitHub Actions cache (if force rebuild)
      if: github.event.inputs.force_rebuild == 'true'
      run: |
        echo "ðŸ§¹ Clearing GitHub Actions cache..."
        gh cache delete --all || true
        echo "âœ… Cache cleared"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Extract metadata
      id: meta
      run: |
        echo "commit_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "commit_ref=${GITHUB_SHA}" >> $GITHUB_OUTPUT
        echo "branch=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        echo "repository_lower=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]' | sed 's/-docker//')" >> $GITHUB_OUTPUT

    - name: Build images
      uses: docker/bake-action@v5
      with:
        files: docker-bake.hcl
        targets: all
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max
        # Ensure proper authentication for multi-image builds
        provenance: false
        sbom: false
      env:
        REGISTRY_URL: ghcr.io/${{ steps.meta.outputs.repository_lower }}/
        IMAGE_LABEL: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.meta.outputs.commit_sha || 'latest' }}
