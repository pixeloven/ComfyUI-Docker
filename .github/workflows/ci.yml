name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        type: boolean
        default: false

jobs:
  validate-config:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Docker Compose
      run: |
        docker compose config --quiet
    
    - name: Validate Docker Bake
      run: |
        docker buildx bake --file docker-bake.hcl --print

  test-compose-profiles:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Test Docker Compose profiles
      run: |
        # Test that profiles are properly configured
        docker compose --profile cpu config --services | grep -q core-cpu
        docker compose --profile core config --services | grep -q core-cuda
        docker compose --profile complete config --services | grep -q complete-cuda

  test-bake-targets:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Test Docker Bake targets
      run: |
        # Validate all expected targets exist in docker-bake.hcl
        docker buildx bake --file docker-bake.hcl --print | grep -q "core-cpu"
        docker buildx bake --file docker-bake.hcl --print | grep -q "core-cuda"
        docker buildx bake --file docker-bake.hcl --print | grep -q "runtime-cpu"
        docker buildx bake --file docker-bake.hcl --print | grep -q "runtime-cuda"
        docker buildx bake --file docker-bake.hcl --print | grep -q "complete-cuda"

  build-images:
    runs-on: ubuntu-latest
    needs: [validate-config, test-compose-profiles, test-bake-targets]
    env:
      REGISTRY: ghcr.io
    steps:
    - uses: actions/checkout@v4
    
    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Clean Docker Images
      run: |
        echo "🧹 Removing Docker images..."
        sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
        echo "✅ Docker images cleaned"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug
  
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Clear GitHub Actions cache (if force rebuild)
      if: github.event.inputs.force_rebuild == 'true'
      run: |
        echo "🧹 Clearing GitHub Actions cache..."
        gh cache delete --all || true
        echo "✅ Cache cleared"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Build images
      uses: docker/bake-action@v5
      with:
        files: docker-bake.hcl
        targets: all
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max
        # Ensure proper authentication for multi-image builds
        provenance: false
        sbom: false


  pr-summary:
    runs-on: ubuntu-latest
    needs: [validate-config, test-compose-profiles, test-bake-targets, build-images]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: PR Validation Summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'validate-config': '${{ needs.validate-config.result }}',
              'test-compose-profiles': '${{ needs.test-compose-profiles.result }}',
              'test-bake-targets': '${{ needs.test-bake-targets.result }}',
              'build-images': '${{ needs.build-images.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            let summary = `## 🔍 PR Validation Results\n\n`;
            summary += `**${passed}/${total} checks passed**\n\n`;
            
            for (const [check, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
              summary += `${emoji} ${check.replace('-', ' ')}: ${result}\n`;
            }
            
            if (passed === total) {
              summary += `\n🎉 All validation checks passed! This PR is ready for review.`;
            } else {
              summary += `\n⚠️ Some validation checks failed. Please review and fix the issues.`;
            }
            
            // Add comment to PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

