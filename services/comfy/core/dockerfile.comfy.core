FROM runtime AS core

# ComfyUI Docker Image - Volume Architecture
# 
# REQUIRED VOLUMES:
#   /data   - Models, custom nodes, user configs (mount required for persistence)
#   
# DIRECTORY STRUCTURE:
#   /data/comfy/custom_nodes/  - Installed custom nodes (persistent)
#   /data/comfy/input/         - Input images and workflows
#   /data/comfy/models/        - AI models (checkpoints, LoRAs, etc.)
#   /data/comfy/output/        - Generated images and workflows
#   /data/comfy/temp/          - Temporary files
#   /data/comfy/user/          - User configurations and workflows
#   /home/comfy/app/           - ComfyUI application (ephemeral)
#
# VOLUME MOUNT EXAMPLES:
#   docker run -v ./data:/data comfyui
#   docker-compose.yml: ./data:/data:delegated

# Remove ubuntu user
# https://askubuntu.com/questions/1513927/ubuntu-24-04-docker-images-now-includes-user-ubuntu-with-uid-gid-1000
RUN touch /var/mail/ubuntu && \
    chown ubuntu /var/mail/ubuntu && \
    userdel -r ubuntu

ARG PUID=1000
ARG PGID=1000
RUN groupadd -g $PGID comfy && \
    useradd -m -u $PUID -g $PGID comfy

# Create persistent data directories structure
# These directories will be volume-mounted in production for data persistence
# RUN mkdir -p /data/comfy/{custom_nodes,input,models,output,temp,user} && \
#     mkdir -p /data/comfy/models/{checkpoints,vae,loras,embeddings,hypernetworks,controlnet,clip_vision,upscale_models,ipadapter} && \
#     chown -R comfy:comfy /data

RUN mkdir -p /data && \
    chown -R comfy:comfy /data

USER comfy

WORKDIR /home/comfy

SHELL ["/bin/bash", "--login", "-c"]

# Setup Python virtual environment for ComfyUI
ENV VENV_PATH=/home/comfy/venv
ENV XDG_CACHE_HOME=/home/comfy/.cache

# Create Python virtual environment
RUN python3 -m venv $VENV_PATH && \
  echo "source $VENV_PATH/bin/activate" >> ~/.bashrc

ENV PATH="$VENV_PATH/bin:$PATH"

# Install ComfyUI and ComfyUI-Manager - symlinks will be created at runtime to preserve manager
ARG RUNTIME=cuda
RUN --mount=type=cache,mode=0755,uid=1000,gid=1000,target=/home/comfy/.cache/pip \
  source $VENV_PATH/bin/activate && \
  pip install comfy-cli && \
  if [ "$RUNTIME" = "cuda" ]; then \
    comfy --skip-prompt --workspace /home/comfy/app install --nvidia; \
  else \
    comfy --skip-prompt --workspace /home/comfy/app install --cpu; \
  fi && \
  comfy --skip-prompt set-default /home/comfy/app && \
  comfy --skip-prompt --no-enable-telemetry env

WORKDIR /home/comfy/app

COPY --chown=comfy:comfy . .

RUN pip cache purge && \
  chmod u+x ./entrypoint.sh && \
  chmod u+x ./startup.sh

# Set environment variables
ARG CLI_ARGS=""
ARG COMFY_PORT=8188
ARG COMFY_DATA_DIRECTORY="/data"

# Convenience environment variables
ENV CLI_ARGS=$CLI_ARGS
ENV COMFY_PORT=$COMFY_PORT
ENV COMFY_APP_DIRECTORY="/home/comfy/app"
ENV COMFY_DATA_DIRECTORY=$COMFY_DATA_DIRECTORY
ENV COMFY_BASE_DIRECTORY="$COMFY_DATA_DIRECTORY/comfy"

# Set environment variables for ComfyUI
ENV COMFYUI_MODEL_PATH="$COMFY_BASE_DIRECTORY/models"
ENV COMFYUI_CUSTOM_NODES_PATH="$COMFY_BASE_DIRECTORY/custom_nodes"

EXPOSE $COMFY_PORT

ENTRYPOINT ["./entrypoint.sh"]

CMD ["bash", "./startup.sh"]